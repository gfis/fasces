#!/usr/bin/perl
#
# 2018-05-15: 4th attempt, search for paths
# Program in the public domain
# c.f. https://oeis.org/A220952
# C.f. Knuth's meander sequence, OEIS A220952
# usage:
#   perl gen_search_paths.pl > search_paths.tmp
#   perl search_paths.tmp -b 5
#-------------------------
use strict;
use integer; # avoid division problems with reals

print <<'GFis'; # header
#!/usr/bin/perl
#
# 2018-05-15: 4th attempt, search for paths
# Program in the public domain
# c.f. https://oeis.org/A220952
# C.f. Knuth's meander sequence, OEIS A220952
# usage:
#   perl gen_search_paths.pl > search_paths.tmp
#   perl search_paths.tmp -b 5
#       -b   base (default 5)
#       -d n debug level n (default: 0)
#-------------------------
use strict;
use integer; # avoid division problems with reals

my $debug  = 0;
my $base   = 3;
while (scalar(@ARGV) > 0) { # get commandline paramters
    my $opt = shift(@ARGV);
    if ($opt =~ m{\A(\-b)?(\d+)\Z}) {
        $base  = $2;
    }
    if ($opt =~ m{d}) {
        $debug = shift(@ARGV);
    }
} # while opt
my $basep2   = $base   * $base;
my $basep3   = $basep2 * $base;
my $maxpath2 = $basep2 * 2; # because we store tuples (node,dir)

my @dircode;
$dircode[0] = "**"; # codes for the directions
my $mexp3 = 0; # greater than all bit exponents: 6
my $bit = 1;
#  direction masks zzyyxx - caution, the order here is very important below
#                  pmpmpm
my $xm1   = $bit;  $dircode[$bit] = "x-"; $bit <<= 1; $mexp3 ++;  # left
my $xp1   = $bit;  $dircode[$bit] = "x+"; $bit <<= 1; $mexp3 ++;  # right
my $ym1   = $bit;  $dircode[$bit] = "y-"; $bit <<= 1; $mexp3 ++;  # down
my $yp1   = $bit;  $dircode[$bit] = "y+"; $bit <<= 1; $mexp3 ++;  # up
my $mbit2 = $bit;                                               
my $mexp2 = $mexp3;                                             
my $zm1   = $bit;  $dircode[$bit] = "z-"; $bit <<= 1; $mexp3 ++;  # nearer
my $zp1   = $bit;  $dircode[$bit] = "z+"; $bit <<= 1; $mexp3 ++;  # farer
my $mbit3 = $bit; # greater than all bitmask values: 64
my $mbit3m1 = $mbit3 - 1;

my @crosum  = (); # $cross[n] = number of bits set in n
my @invmask = (); # inverse masks (^= xor - clear bit)
my @revdir  = (); # reverse directions
my $num;
for ($num = 0; $num < $mbit3; $num ++) {
    my $csum = 0;
    $bit = 1;
    while ($bit <= $num) {
        if (($num & $bit) != 0) {
            $csum ++;
        }
        $bit <<= 1;
    } # while $bit
    $crosum [$num] = $csum;
    $invmask[$num] = 0;
    $revdir [$num] = 0;
} # for $num;
$bit = 1;
my $exp = 0;
while ($bit <= $mbit3) {
    $invmask[$bit] = $mbit3m1 ^ $bit;
    $revdir [$bit] = ($exp & 1) != 0 ? $bit >> 1 : $bit << 1;
    $exp ++;
    $bit <<= 1;
} # while $bit

my @poss2;  # possible connections in a square plane of @cube3
my @poss3;  # possible connections in @cube3
my @cube2;  # bitmask for occupied connections in a node
my @cube3;  # bitmask for occupied connections in a node
my ($x, $y, $z);

for ($z = 0; $z < $base; $z ++) { # preset with 0
    for ($y = 0; $y < $base; $y ++) {
        for (my $x = 0; $x < $base; $x ++) {
            $poss2    [$y][$x] = 0;
            $cube2    [$y][$x] = 0;
            $poss3[$z][$y][$x] = 0;
            $cube3[$z][$y][$x] = 0;
        } # for $x
    } # for y
} # for z

for ($z = 0; $z < $base; $z ++) { # set bit if move is possible
    for ($y = 0; $y < $base; $y ++) {
        for (my $x = 0; $x < $base; $x ++) {
            if ($z - 1 >= 0   ) {                         $poss3[$z][$y][$x] |= $zm1; }
            if ($z + 1 < $base) {                         $poss3[$z][$y][$x] |= $zp1; }
            if ($y - 1 >= 0   ) { $poss2[$y][$x] |= $ym1; $poss3[$z][$y][$x] |= $ym1; }
            if ($y + 1 < $base) { $poss2[$y][$x] |= $yp1; $poss3[$z][$y][$x] |= $yp1; }
            if ($x - 1 >= 0   ) { $poss2[$y][$x] |= $xm1; $poss3[$z][$y][$x] |= $xm1; }
            if ($x + 1 < $base) { $poss2[$y][$x] |= $xp1; $poss3[$z][$y][$x] |= $xp1; }
        } # for $x
    } # for y
} # for z

if ($debug >= 3) { # show preset arrays
	print "# crosum, mexp3=$mexp3, mbit3=$mbit3";
	for ($num = 0; $num < $mbit3; $num ++) {
	    if ($num % 8 == 0) {
	        print "\n" . sprintf("%3d:  ", $num);
	    }
	    print sprintf("%3d ", $crosum[$num]);
	} # for
	print "\n";
	
	print "# masks\n";
	print sprintf("%06b %06b %06b %06b %06b %06b\n\n", $xm1, $xp1, $ym1, $yp1, $zm1, $zp1);
	$bit = 1;
	while ($bit < $mbit3) {
	    print sprintf("%06b %06b %06b\n", $bit, $invmask[$bit], $revdir[$bit]);
	    $bit <<= 1;
	} # while $bit
	
	print "# poss2, base=$base\n";
	    for ($y = 0; $y < $base; $y ++) { # set bit if move is possible
	        for ($x = 0; $x < $base; $x ++) {
	            print sprintf("%06b ", $poss2[$y][$x]);
	        } # for x
	        print "\n";
	    } # for y
	print "# poss3\n";
	for ($z = 0; $z < $base; $z ++) { # set bit if move is possible
	    for ($y = 0; $y < $base; $y ++) {
	        for (my $x = 0; $x < $base; $x ++) {
	            print sprintf("%06b ", $poss3[$z][$y][$x]);
	        } # for $x
	        print "\n";
	    } # for y
	    print "\n";
	} # for z
	print "# end prefilled\n";
} # debug
#-------------------------------
# start with a bar upwards from 00 to 01
$y = 0;
$x = 0;
my @path2 = ("$y,$x", "**"); # dir = 0 -> no predecessor
my $pathno = 0;
my $level = 0;
&evaluate2($y, $x, $yp1, $y + 1, $x);
#--------
sub evaluate2 {
# evaluate all possible continuations for @path2
# and check whether corresponding nodes on @path3 have at most 2 connections to other nodes
    my         ($yp, $xp, $dirpn2, $yn, $xn) = @_; # old node, direction, new node
    my $dirnp2 = $revdir[$dirpn2];
    $level ++;
	if ($debug >= 1) {
	    print sprintf("# %3d: evaluate(%d,%d) %s (%d,%d) "
	    		, $level, $yp, $xp, $dircode[$dirpn2], $yn, $xn) 
	    		. &pastr(0) . "\n";
	}
    if (&alloc2($yp, $xp, $dirpn2, $yn, $xn) == 0) { # ($yn,$xn) is possible
        # try all 4 positions for next node
        $bit = $yp1; if ($dirnp2 != $bit and ($poss2[$yn][$xn] & $bit) != 0) { &evaluate2($yn, $xn, $bit, $yn + 1, $xn    ); }
        $bit = $ym1; if ($dirnp2 != $bit and ($poss2[$yn][$xn] & $bit) != 0) { &evaluate2($yn, $xn, $bit, $yn - 1, $xn    ); }
        $bit = $xp1; if ($dirnp2 != $bit and ($poss2[$yn][$xn] & $bit) != 0) { &evaluate2($yn, $xn, $bit, $yn,     $xn + 1); }
        $bit = $xm1; if ($dirnp2 != $bit and ($poss2[$yn][$xn] & $bit) != 0) { &evaluate2($yn, $xn, $bit, $yn,     $xn - 1); }
    } # if alloc
    &free2($yp, $xp, $dirpn2, $yn, $xn);
	if ($debug >= 2) {
	    print sprintf("# %3d:   return(%d,%d) %s (%d,%d) "
	    		, $level, $yp, $xp, $dircode[$dirpn2], $yn, $xn) 
	    		. &pastr(0) . "\n";
	}
    $level --;
} # evaluate2
#-------------------------------
sub pastr { # return a string for @path2
	my ($break) = @_;
	my $result = "";
	my $ind = 0;
	while ($ind < scalar(@path2)) {
		my $elem = $path2[$ind];
		$elem =~ s{\D}{}g;
		$result .= ",$elem";
		$ind += 2;
		if ($ind % 32 == 0 and $break > 0) {
			$result .= "\n";
		}
	} # while
	return $result;
} # pastr
#-------------------------------
sub alloc2 {
    my ($yp, $xp, $dirpn2, $yn, $xn) = @_; # old node, direction, new node
    #              00yyxx
    my $fail = 0; # assume success
    if (($poss2[$yp][$xp] & $dirpn2) != 0) { # node exists
	    if ($cube2[$yn][$xn] != 0) {
	        $fail = 2; # already occupied
	    } else { # not yet occupied
	        $cube2[$yp][$xp] |= $dirpn2;          # connect prev to new
	        $cube2[$yn][$xn] |= $revdir[$dirpn2]; # connect new to prev, backwards
	        push(@path2, "$yn,$xn", $dircode[$dirpn2]); # tuples (node,dir)
	        if (scalar(@path2) >= $maxpath2) {
	            $pathno ++;
	            my $count = 0;
	            print "# path $pathno:\n" . &pastr(1) . "\n";
	            $fail = 3; # end reached
	        }
	    	if (0) { # check in 3d for speed and adjacency rule
	    	    # if 00 ~ 01 then for n = 0..base-1:
	    	    #    n00 ~ n01
	    	    #    0n0 ~ 0n1
	    	    #    00n ~ 01n
	    	    my $na = 0;
	    	    my $dir00yyxx = $dirpn2;
	    	    my $diryy00xx = (($dirpn2 & 0b001100) << 2) | ($dirpn2 & 0b000011) ;
	    	    my $diryyxx00 = $dirpn2 << 2;
	    	    while ($fail == 0 and $na < $base) {
	    	        # $dirpn remains 00yyxx
	    	        $fail = &alloc3($na, $yp, $xp, $dir00yyxx, $na, $yn, $xn);
	    	        if ($fail == 0) {
	    	        $fail = &alloc3($yp, $na, $xp, $diryy00xx, $yn, $na, $xn);
	    	        if ($fail == 0) {
	    	        $fail = &alloc3($yp, $xp, $na, $diryyxx00, $yn, $xn, $na);
	    	        }}
	    	        $na ++;
	    	    } # while
	    	}
	    } # if not yet occupied
	} else {
		$fail = 1;
	    if ($debug >= 2) {
    	    print sprintf("#      not poss2: %06b %06b\n", $poss2[$yp][$xp], $dirpn2);
		}
	}
    if ($debug >= 2) {
        print sprintf("#      alloc2  (%d,%d) -> (%d,%d) ", $yp, $xp, $yn, $xn) . &pastr(0);
		print $fail != 0 ? " failure $fail\n" : " ok\n";
	}
    return $fail;
} # alloc2
#--------
sub alloc3 {
    my ($zp, $yp, $xp, $dirpn3, $zn, $yn, $xn) = @_; # old node, direction, new node
    #                   zzyyxx
    my $fail = 0; # assume success
	if (($poss3[$zp][$yp][$xp] & $dirpn3) != 0) {
        $cube3[$zp][$yp][$xp] |= $dirpn3;          # connect prev to new
        $cube3[$zn][$yn][$xn] |= $revdir[$dirpn3]; # connect new to prev, backwards
	    if ($crosum[$cube3[$zp][$yp][$xp]] <= 2 and 
		    $crosum[$cube3[$zn][$yn][$xn]] <= 2) {
	    } else { # not yet occupied
	        $fail = 3; # more than 2 connections
	    }
	} else {
		$fail = 1;
	    if ($debug >= 3) {
    	    print sprintf("#      not poss3: %06b %06b\n", $poss3[$zp][$yp][$xp], $dirpn3);
		}
	}
    if ($debug >= 3) {
        print sprintf("#      alloc3  (%d,%d,%d) -> (%d,%d,%d) ", $zp, $yp, $xp, $zn, $yn, $xn) 
        	. &pastr(0);
		print $fail != 0 ? " failure $fail\n" : " ok\n";
	}
    return $fail;
} # alloc3
#--------
sub free2 {
    my ($yp, $xp, $dirpn2, $yn, $xn) = @_; # old node, direction, new node
    #              00yyxx
    if ($debug >= 3) {
        print sprintf("#      free 2  (%d,%d) -> (%d,%d) ", $yp, $xp, $yn, $xn) . &pastr(0) . "\n";
    }
    {
        $cube2[$yp][$xp]      &= $invmask[$dirpn2];          # disconnect prev to new
        $cube2[$yn][$xn]      &= $invmask[$revdir[$dirpn2]]; # disconnect new to prev, backwards
        pop(@path2); # dir
        pop(@path2); # node
    }
    my $na = 0;
    my $dir00yyxx = $dirpn2;
    my $diryy00xx = (($dirpn2 & 0b001100) << 2) | ($dirpn2 & 0b000011) ;
    my $diryyxx00 = $dirpn2 << 2;
    while ($na < $base) {
        # $dirpn remains 00yyxx
        &free3 ($na, $yp, $xp, $dir00yyxx, $na, $yn, $xn);
        &free3 ($yp, $na, $xp, $diryy00xx, $yn, $na, $xn);
        &free3 ($yp, $xp, $na, $diryyxx00, $yn, $xn, $na);
        $na ++;
    } # if
} # free2
#--------
sub free3 {
    my ($zp, $yp, $xp, $dirpn3, $zn, $yn, $xn) = @_; # old node, direction, new node
    #                   zzyyxx
    if ($debug >= 3) {
        print sprintf("#      free 3  (%d,%d) -> (%d,%d) ", $yp, $xp, $yn, $xn) . &pastr(0) . "\n";
    }
    {
        $cube3[$zp][$yp][$xp] &= $invmask[$dirpn3];          # disconnect prev to new
        $cube3[$zn][$yn][$xn] &= $invmask[$revdir[$dirpn3]]; # disconnect new to prev, backwards
    }
} # free3
__DATA__

$filled[0][0][0] = 1;
$filled[0][0][1] = 1;
my $pathno = 0;
my @path = ("000","001"); # the FASS curve
my ($head, $tail, $snail, $message);
my ($pozy, $vazy);
my ($pozx, $vazx);
my ($poyx, $vayx);

my $zmove = 1;
&check(0, 0, 1, "<00>", ".00<01>", ".00<01>");
exit(0);
#--------
sub check {
    my ($z, $y, $x, $pazy, $pazx, $payx) = @_;
    if ($x > 0        ) { $x --; if ($filled[$z][$y][$x] == 0) { &alloc($z, $y, $x, $pazy, $pazx, $payx); } $x ++; }
    if ($x < $base - 1) { $x ++; if ($filled[$z][$y][$x] == 0) { &alloc($z, $y, $x, $pazy, $pazx, $payx); } $x --; }
    if ($y > 0        ) { $y --; if ($filled[$z][$y][$x] == 0) { &alloc($z, $y, $x, $pazy, $pazx, $payx); } $y ++; }
    if ($y < $base - 1) { $y ++; if ($filled[$z][$y][$x] == 0) { &alloc($z, $y, $x, $pazy, $pazx, $payx); } $y --; }
    if ($zmove == 1) {
    if ($z > 0        ) { $z --; if ($filled[$z][$y][$x] == 0) { &alloc($z, $y, $x, $pazy, $pazx, $payx); } $z ++; }
    if ($z < $base - 1) { $z ++; if ($filled[$z][$y][$x] == 0) { &alloc($z, $y, $x, $pazy, $pazx, $payx); } $z --; }
    } # if zmove
} # check
#--------
sub alloc {
    my ($z, $y, $x, $pazy, $pazx, $payx) = @_;
    if ($debug >= 2) {
        print sprintf("# add   ") . join(",", @path) . " \+$z$y$x\n";
    }
    push(@path, "$z$y$x");
    $snail = 1; # assume a line without circle and branches
    $filled[$z][$y][$x] = 1;
GFis
my $pattern;
$pattern = <<'GFis';
    #--------
    $vazy = "$z$y";
    $message = "";
    if ($debug >= 3) {
        print "# pre   zy  $pazy \+$vazy\n";
    }
    if ($snail == 1) {
        if (0) {
        } elsif ($pazy !~ m{$vazy}           ) { # not found
            $snail = 0;
            if ($pazy =~ m{\<(\d+)\>\Z}) { # current is tail
                $tail = $1;
                if ($poss2{$tail} =~ m{$vazy}) {
                    $pazy      =~ s{\<$tail\>}{\.$tail\<$vazy\>}; # append
                    $snail = 1;
                } else {
                    $message .= " !posst";
                }
            }
            if ($snail == 0 and ($pazy =~ m{\A\<(\d+)\>})) { # current is head
                $head = $1;
                if ($poss2{$head} =~ m{$vazy}) {
                    $pazy      =~ s{\<$head\>}{\<$vazy\>$head\.}; # prepend
                    $snail = 1;
                } else {
                    $message .= " !possh";
                }
            }
            # not found
        } elsif ($pazy =~ m{\<$vazy\>}       ) { # same as current
            # do nothing
        } elsif ($pazy =~ m{\<(\d+)\>$vazy\.}) { # behind current
            $pazy      =~ s{\<(\d+)\>$vazy\.}{\.$1\<$vazy\>}; # move to successor
        } elsif ($pazy =~ m{\.$vazy\<(\d+)\>}) { # before current
            $pazy      =~ s{\.$vazy\<(\d+)\>}{\<$vazy\>$1\.}; # move to predecessor
        } else {
#       } elsif ($pazy =~ m{\.$vazy\.}       ) { # found, but elsewhere
            $snail = 0;
            $message .= " middle";
        }
        if ($debug >= 2) {
            print "#       zy  $pazy \+$vazy sn=$snail $message\n";
        }
        $pozy = $pazy; $pozy =~ s{[\<\>]}{\.}g;
    } # $snail == 1
GFis
print $pattern;
$pattern =~ s{\$y}{\$x}g;
$pattern =~ s{zy}{zx}g;
print $pattern;
$pattern =~ s{\$z}{\$y}g;
$pattern =~ s{zx}{yx}g;
print $pattern;

print <<'GFis';
    #--------
    if (0
        and ($pozy !~ m{\A$pozx})
        and ($pozx !~ m{\A$poyx})
        and ($poyx !~ m{\A$pozy})) {
        $snail = 0;
        $message .= " no two";
    }
    if (0) {
    } elsif ($snail < 1) {
        # do not recurse
    } elsif (scalar(@path) >= $bpow3) {
        $pathno ++;
        my $count = 0;
        print sprintf("# path %3d:\n[", $pathno)
                . join(",", map {$count ++; $count % 16 == 0 ? "$_\n" : $_ } @path) . "]\n";
        if ($debug >= 1) {
            print "# $pozy\n";
            print "# $pozx\n";
            print "# $poyx\n";
        }
        # do not recurse
    } else { # recurse
        &check($z, $y, $x, $pazy, $pazx, $payx);
    }
    #--------
    $filled[$z][$y][$x] = 0;
    pop(@path);
    if ($debug >= 3) {
        print sprintf("#   sub ") . join(",", @path) . " \-$z$y$x\n";
    }
} # alloc
__DATA__
GFis
__DATA__
perl 3d_paths.tmp -b 3 -d 0 | tee 3d_paths.3.tmp
# path   1:
[000,001,002,012,011,010,020,021,022,122,121,120,110,111,112,102
,101,100,200,201,202,212,211,210,220,221,222]
# path   2:
[000,001,002,012,011,010,020,021,022,122,222,221,121,120,220,210
,110,111,211,212,112,102,202,201,101,100,200]
# path   3:
[000,001,002,102,101,100,200,201,202,212,211,210,110,111,112,012
,011,010,020,021,022,122,121,120,220,221,222]
# path   4:
[000,001,002,102,101,100,200,201,202,212,222,221,211,210,220,120
,110,111,121,122,112,012,022,021,011,010,020]
# path   5:
[000,001,011,010,020,021,121,120,110,111,101,100,200,201,211,210
,220,221,222,212,202,102,112,122,022,012,002]
# path   6:
[000,001,101,100,200,201,211,210,110,111,011,010,020,021,121,120
,220,221,222,122,022,012,112,212,202,102,002]

C:\Users\gfis\work\gits\fasces\data>perl 3d_paths.tmp -b 4 -d 1
# path   1:
[000,001,002,003,013,012,011,010,020,021,022,023,033,032,031,030
,130,131,132,133,123,122,121,120,110,111,112,113,213,212,211,210
,220,221,222,223,233,232,231,230,330,331,332,333,323,322,321,320
,310,311,312,313,303,302,301,300,200,201,202,203,103,102,101,100
]
# .00.01.02.03.13.12.11.21.22.23.33.32.31.30.20.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# path   2:
[000,001,002,003,013,012,011,010,020,021,022,023,033,032,031,030
,130,131,132,133,233,232,231,230,330,331,332,333,323,322,321,320
,310,311,312,313,303,302,301,300,200,201,202,203,213,212,211,210
,220,221,222,223,123,122,121,120,110,111,112,113,103,102,101,100
]
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# path   3:
[000,001,002,003,013,012,011,010,020,021,022,023,033,032,031,030
,130,131,132,133,233,232,231,230,330,331,332,333,323,322,321,320
,220,221,222,223,123,122,121,120,110,111,112,113,213,212,211,210
,310,311,312,313,303,302,301,300,200,201,202,203,103,102,101,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# path   4:
[000,001,002,003,013,012,011,010,020,021,022,023,033,032,031,030
,130,131,231,230,330,331,332,232,132,133,233,333,323,223,123,122
,222,322,321,320,220,221,121,120,110,111,211,210,310,311,312,212
,112,113,213,313,303,203,103,102,202,302,301,300,200,201,101,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# path   5:
[000,001,002,003,013,012,011,010,020,021,022,023,033,032,031,030
,130,230,330,331,332,232,231,131,132,133,233,333,323,223,123,122
,121,221,222,322,321,320,220,120,110,210,310,311,312,212,211,111
,112,113,213,313,303,203,103,102,101,201,202,302,301,300,200,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# path   6:
[000,001,002,003,013,012,011,010,020,021,022,023,033,032,031,030
,130,230,330,331,231,131,132,133,233,232,332,333,323,322,222,223
,123,122,121,221,321,320,220,120,110,210,310,311,211,111,112,113
,213,212,312,313,303,302,202,203,103,102,101,201,301,300,200,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# path   7:
[000,001,002,003,013,012,011,010,110,111,112,113,213,212,211,210
,220,221,222,223,123,122,121,120,020,021,022,023,033,032,031,030
,130,131,132,133,233,232,231,230,330,331,332,333,323,322,321,320
,310,311,312,313,303,302,301,300,200,201,202,203,103,102,101,100
]
# .00.01.11.21.22.12.02.03.13.23.33.32.31.30.20.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# path   8:
[000,001,002,003,013,012,022,023,033,032,031,021,011,010,020,030
,130,120,110,111,121,131,132,133,123,122,112,113,213,212,222,223
,233,232,231,221,211,210,220,230,330,320,310,311,321,331,332,333
,323,322,312,313,303,302,301,300,200,201,202,203,103,102,101,100
]
# .00.01.02.03.13.12.11.21.22.23.33.32.31.30.20.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.12.22.23.33.32.31.21.11.10.20.30.
# path   9:
[000,001,002,003,013,012,022,023,033,032,031,021,011,010,020,030
,130,120,110,210,220,230,330,320,310,311,321,331,231,221,211,111
,121,131,132,133,123,122,112,113,213,212,222,223,233,232,332,333
,323,322,312,313,303,302,202,203,103,102,101,201,301,300,200,100
]
# .00.01.02.03.13.12.11.21.22.23.33.32.31.30.20.10.
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.12.22.23.33.32.31.21.11.10.20.30.
# path  10:
[000,001,002,003,013,012,022,023,033,032,031,021,011,010,020,030
,130,230,330,320,220,120,110,210,310,311,211,111,121,221,321,331
,231,131,132,133,233,232,332,333,323,322,222,223,123,122,112,113
,213,212,312,313,303,302,202,203,103,102,101,201,301,300,200,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.12.22.23.33.32.31.21.11.10.20.30.
# path  11:
[000,001,002,003,013,023,033,032,031,021,022,012,011,010,020,030
,130,120,110,111,112,122,121,131,132,133,123,113,213,223,233,232
,231,221,222,212,211,210,220,230,330,320,310,311,312,322,321,331
,332,333,323,313,303,302,301,300,200,201,202,203,103,102,101,100
]
# .00.01.02.03.13.12.11.21.22.23.33.32.31.30.20.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.31.21.22.12.11.10.20.30.
# path  12:
[000,001,002,003,013,023,033,032,031,021,022,012,011,010,020,030
,130,120,110,210,220,230,330,320,310,311,312,322,321,331,332,232
,231,221,222,212,211,111,112,122,121,131,132,133,123,113,213,223
,233,333,323,313,303,203,103,102,101,201,202,302,301,300,200,100
]
# .00.01.02.03.13.12.11.21.22.23.33.32.31.30.20.10.
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.31.21.22.12.11.10.20.30.
# path  13:
[000,001,002,003,013,023,033,032,031,021,022,012,011,010,020,030
,130,230,330,320,220,120,110,210,310,311,312,212,211,111,112,122
,121,221,222,322,321,331,332,232,231,131,132,133,233,333,323,223
,123,113,213,313,303,203,103,102,101,201,202,302,301,300,200,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.31.21.22.12.11.10.20.30.
# path  14:
[000,001,002,003,013,023,033,032,022,012,011,010,020,021,031,030
,130,131,121,120,110,111,112,122,132,133,123,113,213,223,233,232
,222,212,211,210,220,221,231,230,330,331,321,320,310,311,312,322
,332,333,323,313,303,302,301,300,200,201,202,203,103,102,101,100
]
# .00.01.02.03.13.12.11.21.22.23.33.32.31.30.20.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.22.12.11.10.20.21.31.30.
# path  15:
[000,001,002,003,013,023,033,032,022,012,011,010,020,021,031,030
,130,131,121,120,110,111,211,210,220,221,231,230,330,331,321,320
,310,311,312,322,332,232,222,212,112,122,132,133,123,113,213,223
,233,333,323,313,303,203,103,102,202,302,301,300,200,201,101,100
]
# .00.01.02.03.13.12.11.21.22.23.33.32.31.30.20.10.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.22.12.11.10.20.21.31.30.
# path  16:
[000,001,002,003,013,023,033,032,022,012,011,010,020,021,031,030
,130,131,231,230,330,331,321,320,220,221,121,120,110,111,211,210
,310,311,312,212,112,122,222,322,332,232,132,133,233,333,323,223
,123,113,213,313,303,203,103,102,202,302,301,300,200,201,101,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.22.12.11.10.20.21.31.30.
# path  17:
[000,001,002,003,103,102,101,100,110,111,112,113,123,122,121,120
,220,221,222,223,213,212,211,210,200,201,202,203,303,302,301,300
,310,311,312,313,323,322,321,320,330,331,332,333,233,232,231,230
,130,131,132,133,033,032,031,030,020,021,022,023,013,012,011,010
]
# .00.10.11.12.22.21.20.30.31.32.33.23.13.03.02.01.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  18:
[000,001,002,003,103,102,101,100,200,201,202,203,303,302,301,300
,310,311,312,313,323,322,321,320,330,331,332,333,233,232,231,230
,220,221,222,223,213,212,211,210,110,111,112,113,123,122,121,120
,130,131,132,133,033,032,031,030,020,021,022,023,013,012,011,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  19:
[000,001,002,003,103,102,101,100,200,201,202,203,303,302,301,300
,310,311,312,313,323,322,321,320,330,331,332,333,233,232,231,230
,130,131,132,133,033,032,031,030,020,021,022,023,123,122,121,120
,220,221,222,223,213,212,211,210,110,111,112,113,013,012,011,010
]
# .00.10.20.30.31.32.33.23.13.03.02.12.22.21.11.01.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  20:
[000,001,002,003,103,102,101,100,200,201,202,203,303,302,301,300
,310,311,312,313,213,212,211,210,110,111,112,113,123,122,121,120
,220,221,222,223,323,322,321,320,330,331,332,333,233,232,231,230
,130,131,132,133,033,032,031,030,020,021,022,023,013,012,011,010
]
# .00.10.20.30.31.21.11.12.22.32.33.23.13.03.02.01.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  21:
[000,001,002,003,103,102,101,100,200,201,202,203,303,302,301,300
,310,311,321,320,330,331,332,322,312,313,323,333,233,223,213,212
,222,232,231,230,220,221,211,210,110,111,121,120,130,131,132,122
,112,113,123,133,033,023,013,012,022,032,031,030,020,021,011,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# path  22:
[000,001,002,003,103,102,101,100,200,201,202,203,303,302,301,300
,310,320,330,331,332,322,321,311,312,313,323,333,233,223,213,212
,211,221,222,232,231,230,220,210,110,120,130,131,132,122,121,111
,112,113,123,133,033,023,013,012,011,021,022,032,031,030,020,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# path  23:
[000,001,002,003,103,102,101,100,200,201,202,203,303,302,301,300
,310,320,330,331,321,311,312,313,323,322,332,333,233,232,222,223
,213,212,211,221,231,230,220,210,110,120,130,131,121,111,112,113
,123,122,132,133,033,032,022,023,013,012,011,021,031,030,020,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.02.03.13.12.11.10.20.21.22.23.33.32.31.30.
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# path  24:
[000,001,002,003,103,102,202,203,303,302,301,201,101,100,200,300
,310,320,330,230,220,210,110,120,130,131,121,111,211,221,231,331
,321,311,312,313,323,322,332,333,233,232,222,223,213,212,112,113
,123,122,132,133,033,032,022,023,013,012,011,021,031,030,020,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.02.03.13.12.22.23.33.32.31.21.11.10.20.30.
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# path  25:
[000,001,002,003,103,102,202,203,303,302,301,201,101,100,200,300
,310,210,110,111,211,311,312,313,213,212,112,113,123,122,222,223
,323,322,321,221,121,120,220,320,330,230,130,131,231,331,332,333
,233,232,132,133,033,032,031,030,020,021,022,023,013,012,011,010
]
# .00.10.20.30.31.21.11.12.22.32.33.23.13.03.02.01.
# .00.01.02.03.13.12.22.23.33.32.31.21.11.10.20.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  26:
[000,001,002,003,103,102,202,203,303,302,301,201,101,100,200,300
,310,210,110,120,220,320,330,230,130,131,231,331,321,221,121,111
,211,311,312,313,213,212,112,113,123,122,222,223,323,322,332,333
,233,232,132,133,033,032,022,023,013,012,011,021,031,030,020,010
]
# .00.10.20.30.31.21.11.12.22.32.33.23.13.03.02.01.
# .00.01.02.03.13.12.22.23.33.32.31.21.11.10.20.30.
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# path  27:
[000,001,002,003,103,203,303,302,301,201,202,102,101,100,200,300
,310,320,330,230,220,210,110,120,130,131,132,122,121,111,112,212
,211,221,222,232,231,331,332,322,321,311,312,313,323,333,233,223
,213,113,123,133,033,023,013,012,011,021,022,032,031,030,020,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.02.03.13.23.33.32.31.21.22.12.11.10.20.30.
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# path  28:
[000,001,002,003,103,203,303,302,301,201,202,102,101,100,200,300
,310,210,110,111,112,212,211,311,312,313,213,113,123,223,323,322
,321,221,222,122,121,120,220,320,330,230,130,131,132,232,231,331
,332,333,233,133,033,032,031,030,020,021,022,023,013,012,011,010
]
# .00.10.20.30.31.21.11.12.22.32.33.23.13.03.02.01.
# .00.01.02.03.13.23.33.32.31.21.22.12.11.10.20.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  29:
[000,001,002,003,103,203,303,302,301,201,202,102,101,100,200,300
,310,210,110,120,220,320,330,230,130,131,132,232,231,331,332,322
,321,221,222,122,121,111,112,212,211,311,312,313,213,113,123,223
,323,333,233,133,033,023,013,012,011,021,022,032,031,030,020,010
]
# .00.10.20.30.31.21.11.12.22.32.33.23.13.03.02.01.
# .00.01.02.03.13.23.33.32.31.21.22.12.11.10.20.30.
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# path  30:
[000,001,002,003,103,203,303,302,202,102,101,100,200,201,301,300
,310,311,321,320,330,331,231,230,220,221,211,210,110,111,121,120
,130,131,132,122,112,212,222,232,332,322,312,313,323,333,233,223
,213,113,123,133,033,023,013,012,022,032,031,030,020,021,011,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.02.03.13.23.33.32.22.12.11.10.20.21.31.30.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# path  31:
[000,001,002,003,103,203,303,302,202,102,101,100,200,201,301,300
,310,311,211,210,110,111,112,212,312,313,213,113,123,223,323,322
,222,122,121,120,220,221,321,320,330,331,231,230,130,131,132,232
,332,333,233,133,033,032,031,030,020,021,022,023,013,012,011,010
]
# .00.10.20.30.31.21.11.12.22.32.33.23.13.03.02.01.
# .00.01.02.03.13.23.33.32.22.12.11.10.20.21.31.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  32:
[000,001,002,003,103,203,303,302,202,102,101,100,200,201,301,300
,310,311,211,210,110,111,121,120,220,221,321,320,330,331,231,230
,130,131,132,232,332,322,222,122,112,212,312,313,213,113,123,223
,323,333,233,133,033,023,013,012,022,032,031,030,020,021,011,010
]
# .00.10.20.30.31.21.11.12.22.32.33.23.13.03.02.01.
# .00.01.02.03.13.23.33.32.22.12.11.10.20.21.31.30.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# path  33:
[000,001,002,012,011,010,020,030,031,021,022,032,033,023,013,003
,103,113,123,133,233,223,213,203,303,313,323,333,332,322,321,331
,330,320,310,311,312,302,301,300,200,201,202,212,211,210,220,230
,231,221,222,232,132,122,121,131,130,120,110,111,112,102,101,100
]
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# .00.01.02.12.11.10.20.30.31.21.22.32.33.23.13.03.
# path  34:
[000,001,002,012,011,010,020,030,031,021,022,032,033,023,013,003
,103,203,303,313,213,113,123,133,233,223,323,333,332,322,321,331
,330,320,220,230,231,221,222,232,132,122,121,131,130,120,110,111
,112,212,211,210,310,311,312,302,301,300,200,201,202,102,101,100
]
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# .00.01.02.12.11.10.20.30.31.21.22.32.33.23.13.03.
# path  35:
[000,001,002,012,011,010,020,030,031,021,022,032,033,023,013,003
,103,203,303,313,213,113,123,133,233,223,323,333,332,322,222,232
,132,122,121,131,231,221,321,331,330,320,220,230,130,120,110,210
,310,311,211,111,112,212,312,302,202,102,101,201,301,300,200,100
]
# .33.32.22.23.13.12.11.21.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .00.01.02.12.11.10.20.30.31.21.22.32.33.23.13.03.
# path  36:
[000,001,002,012,022,021,011,010,020,030,031,032,033,023,013,003
,103,113,123,133,233,223,213,203,303,313,323,333,332,331,330,320
,310,311,321,322,312,302,301,300,200,201,202,212,222,221,211,210
,220,230,231,232,132,131,130,120,110,111,121,122,112,102,101,100
]
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# .00.01.02.12.22.21.11.10.20.30.31.32.33.23.13.03.
# path  37:
[000,001,002,012,022,021,011,010,020,030,031,032,033,023,013,003
,103,203,303,313,323,223,213,113,123,133,233,333,332,331,330,230
,231,232,132,131,130,120,110,111,121,122,112,212,222,221,211,210
,220,320,310,311,321,322,312,302,301,300,200,201,202,102,101,100
]
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# .00.01.02.12.22.21.11.10.20.30.31.32.33.23.13.03.
# path  38:
[000,001,002,012,022,021,011,010,020,030,031,032,033,023,013,003
,103,203,303,313,323,223,213,113,123,133,233,333,332,232,132,131
,231,331,330,230,130,120,110,210,220,320,310,311,321,221,211,111
,121,122,112,212,222,322,312,302,202,102,101,201,301,300,200,100
]
# .33.23.13.12.11.21.22.32.31.30.20.10.00.01.02.03.
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .00.01.02.12.22.21.11.10.20.30.31.32.33.23.13.03.
# path  39:
[000,001,002,102,101,100,200,300,301,201,202,302,303,203,103,003
,013,023,033,133,123,113,213,313,323,223,233,333,332,232,231,331
,330,230,220,320,321,221,222,322,312,212,211,311,310,210,110,111
,112,122,121,120,130,131,132,032,031,030,020,021,022,012,011,010
]
# .33.23.22.32.31.21.11.12.13.03.02.01.00.10.20.30.
# .00.01.02.12.11.10.20.30.31.21.22.32.33.23.13.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# path  40:
[000,001,002,102,101,100,200,300,301,201,202,302,303,203,103,003
,013,023,033,133,123,113,213,313,323,223,233,333,332,232,222,322
,312,212,211,311,321,221,231,331,330,230,220,320,310,210,110,120
,130,131,121,111,112,122,132,032,022,012,011,021,031,030,020,010
]
# .33.23.22.32.31.21.11.12.13.03.02.01.00.10.20.30.
# .00.01.02.12.11.10.20.30.31.21.22.32.33.23.13.03.
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# path  41:
[000,001,002,102,101,100,200,300,301,201,202,302,303,203,103,003
,013,113,213,313,323,223,123,023,033,133,233,333,332,232,231,331
,330,230,130,131,132,032,031,030,020,021,022,122,121,120,220,320
,321,221,222,322,312,212,211,311,310,210,110,111,112,012,011,010
]
# .33.23.13.03.02.12.22.32.31.21.11.01.00.10.20.30.
# .00.01.02.12.11.10.20.30.31.21.22.32.33.23.13.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# path  42:
[000,001,002,102,202,201,101,100,200,300,301,302,303,203,103,003
,013,023,033,133,233,223,123,113,213,313,323,333,332,331,330,320
,321,322,312,311,310,210,110,111,211,212,112,122,222,221,121,120
,220,230,130,131,231,232,132,032,031,030,020,021,022,012,011,010
]
# .33.32.31.21.11.12.22.23.13.03.02.01.00.10.20.30.
# .00.01.02.12.22.21.11.10.20.30.31.32.33.23.13.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# path  43:
[000,001,002,102,202,201,101,100,200,300,301,302,303,203,103,003
,013,023,033,133,233,223,123,113,213,313,323,333,332,322,312,311
,321,331,330,320,310,210,110,120,220,230,130,131,231,221,121,111
,211,212,112,122,222,232,132,032,022,012,011,021,031,030,020,010
]
# .33.32.31.21.11.12.22.23.13.03.02.01.00.10.20.30.
# .00.01.02.12.22.21.11.10.20.30.31.32.33.23.13.03.
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# path  44:
[000,001,002,102,202,201,101,100,200,300,301,302,303,203,103,003
,013,113,213,313,323,223,123,023,033,133,233,333,332,331,330,230
,130,131,231,232,132,032,031,030,020,021,022,122,222,221,121,120
,220,320,321,322,312,311,310,210,110,111,211,212,112,012,011,010
]
# .33.23.13.03.02.12.22.32.31.21.11.01.00.10.20.30.
# .00.01.02.12.22.21.11.10.20.30.31.32.33.23.13.03.
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# path  45:
[000,001,011,010,020,021,022,012,002,003,013,023,033,032,031,030
,130,131,132,133,233,232,231,230,330,331,332,333,323,313,303,302
,312,322,321,320,310,311,301,300,200,201,211,210,220,221,222,212
,202,203,213,223,123,113,103,102,112,122,121,120,110,111,101,100
]
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# .00.01.11.10.20.21.22.12.02.03.13.23.33.32.31.30.
# path  46:
[000,001,011,010,020,021,022,012,002,003,013,023,033,032,031,030
,130,131,231,230,330,331,332,232,132,133,233,333,323,313,303,203
,213,223,123,113,103,102,112,122,222,212,202,302,312,322,321,320
,310,311,301,300,200,201,211,210,220,221,121,120,110,111,101,100
]
# .00.01.02.03.13.23.33.32.31.30.20.21.22.12.11.10.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# .00.01.11.10.20.21.22.12.02.03.13.23.33.32.31.30.
# path  47:
[000,001,011,010,020,021,022,012,002,003,013,023,033,032,031,030
,130,131,231,230,330,331,332,232,132,133,233,333,323,223,123,113
,213,313,303,203,103,102,202,302,312,212,112,122,222,322,321,320
,220,221,121,120,110,111,211,210,310,311,301,300,200,201,101,100
]
# .00.01.02.03.13.23.33.32.22.12.11.21.31.30.20.10.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# .00.01.11.10.20.21.22.12.02.03.13.23.33.32.31.30.
# path  48:
[000,001,101,100,200,201,202,102,002,003,103,203,303,302,301,300
,310,311,312,313,323,322,321,320,330,331,332,333,233,133,033,032
,132,232,231,230,130,131,031,030,020,021,121,120,220,221,222,122
,022,023,123,223,213,113,013,012,112,212,211,210,110,111,011,010
]
# .00.10.20.30.31.32.33.23.13.03.02.12.22.21.11.01.
# .00.01.11.10.20.21.22.12.02.03.13.23.33.32.31.30.
# .33.32.31.30.20.21.22.23.13.12.11.10.00.01.02.03.
# path  49:
[000,001,101,100,200,201,202,102,002,003,103,203,303,302,301,300
,310,311,321,320,330,331,332,322,312,313,323,333,233,223,213,113
,123,133,033,023,013,012,022,032,132,122,112,212,222,232,231,230
,220,221,211,210,110,111,121,120,130,131,031,030,020,021,011,010
]
# .00.10.20.30.31.32.33.23.22.21.11.12.13.03.02.01.
# .00.01.11.10.20.21.22.12.02.03.13.23.33.32.31.30.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.
# path  50:
[000,001,101,100,200,201,202,102,002,003,103,203,303,302,301,300
,310,311,321,320,330,331,332,322,312,313,323,333,233,133,033,023
,123,223,213,113,013,012,112,212,222,122,022,032,132,232,231,230
,130,131,031,030,020,021,121,120,220,221,211,210,110,111,011,010
]
# .00.10.20.30.31.32.33.23.13.03.02.12.22.21.11.01.
# .00.01.11.10.20.21.22.12.02.03.13.23.33.32.31.30.
# .33.23.13.12.22.32.31.30.20.21.11.10.00.01.02.03.

C:\Users\gfis\work\gits\fasces\data>