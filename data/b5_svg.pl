#!/usr/bin/perl
# 2017-08-23, Georg Fischer
# Convert b-file (base 5 values) to SVG
# usage:
#    perl b5_svg.pl b5_file > drawing.svg
use strict;
use integer; # avoid division problems with reals

my $option = "";
my $base   = 5;
if (scalar(@ARGV) > 0) {
    $option = shift(@ARGV);
    $option =~ s{\-}{}g;
}
if (scalar(@ARGV) > 0) {
    $base = shift(@ARGV);
}

# read the b5-file
my @val   = (); # binary
my @val5  = (); # original base 5 (text)
my $ind = 0;
my $bval = 0;
my %ihash = ();
my %vhash = ();
while (<>) {
    s{\s+\Z}{}; # trim
    next if m{\A\s*\#}; # skip comments
    ($ind, $bval) = split(/\s+/);
    $ihash{$ind } = 1;
    $vhash{$bval} = 1;
    if ($option =~ m{m}) { # convert from base 5
	    $val5[$ind] = $bval;
	    if ($bval >= 0) {
	        my $num = "";
	        my $b5pow = 1;
	        while ($bval > 0) {
	            my $dig5 = $bval % 10;
	            $num = $num + $dig5 * $b5pow;
	            $b5pow *= $base;
	            $bval /= 10;
	        } # while converting
	        $val[$ind] = ($num eq "" ? 0 : $num);
	    } else { # negative
	        $val[$ind] = $bval;
	    } # negative
	} else { # plain decimal 
		$val [$ind] = $bval;
		$val5[$ind] = &based($bval);	
	}
    # print "$ind\t$val5[$ind]\t$val[$ind]\n";
} # while <>

my $len = scalar(@val) - 1;
# now check for proper enumeration
my $ichain = join(",", reverse(sort(keys(%ihash))));
my $vchain = join(",", reverse(sort(keys(%vhash))));
if ($ichain ne $vchain 
	or ($ichain !~ m{\A$len}) 
	or ($vchain !~ m{\A$len}) ) {
		# print STDERR "enumeration check failed\n$ichain\n$vchain\n";
}
my $view0 = -20;
my $view9 = $len + 20;
# prepare SVG
print <<"GFis";
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd" [
 <!ATTLIST svg xmlns:xlink CDATA #FIXED "http://www.w3.org/1999/xlink">
]>
<!--
    2017-08-23, Dr. Georg Fischer: generated by b5_svg.pl, DO NOT EDIT HERE
-->
<svg width="192 mm" height="192 mm"
    viewBox="$view0 $view0 $view9 $view9"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    >
    <title>Z Fractal</title>
    <defs>
        <style type="text/css"><![CDATA[
            rect, line {
                stroke: black;
                fill:none;
                stroke-width:0.1;
                stroke-dasharray: 0.5,0.5;
            }
            circle {
                stroke: red;
                fill:red;
                stroke-width:0.1
            }
            polyline {
                stroke: green;
                fill:none;
                stroke-width:0.2
            }
        ]]></style>
    </defs>
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(0 0)" style="font-color:blue; font-size:8pt">
    <rect x="0"   y="0"   width="$len" height="$len" />
    <!--
    <rect x="0"   y="0"   width="$val[25]" height="25" style="fill:lightyellow"/>
    -->
    <line x1="0"  y1="0"  x2="$len" y2="$len" />
    <line x1="$len"  y1="0"  x2="0" y2="$len" />
GFis

my $radius  = 0.5;
my $toffset = 1;
my @buffer = ();
print "<polyline points=\"";
my $sep = "";
my $ind = 0;
while ($ind <= $len) {
    print "$sep $val[$ind] $ind\n";
    my ($tx, $ty) = ($val[$ind] + $toffset, $ind - $toffset); # attach to upper right quadrant
    push(@buffer, "<circle cx=\"$val[$ind]\" cy=\"$ind\" r=\"$radius\" />\n"
    		.     "<text    x=\"$tx\"         y=\"$ty\" style=\"font-size:1pt\">$val5[$ind]</text>\n"
    		);
    $sep = ",";
    $ind ++;
} # while poiuts
print "\" />\n";
print join("", @buffer);
print <<"GFis";
</g>
</svg>
GFis
#--------
sub based {
    # return a number in base $base
    my ($num) = @_;
    my $bpow = 1;
    my $result = "";
    if ($num <= 0) {
        $result = $num;
    } else {
        while ($num > 0) {
            $result = ($num % $base) . $result;
            $num    /= $base;
            $bpow   *= $base;
        } # while $idig
    }
    return $result; 
} # based
