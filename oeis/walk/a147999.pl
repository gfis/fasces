#!perl

# 2019-06-23, Georg Fischer
# (Mathematica)

use strict;
use integer;
use warnings;
use List::Util qw[min max];
use Time::HiRes qw(time);
use Math::BigInt;
use Math::BigInt':constant';
my $start = time();
my $maxn = shift(@ARGV);

my %hash;
my @cube;
my ($i, $j, $k, $m);
my $limit = 4;
# my $UNDEF = -16;
# for ($m = 0; $m <= $limit; $m ++) {
#     for ($i = 0; $i <= $limit; $i ++) {
#         for ($j = 0; $j <= $limit; $j ++) {
#             for ($k = 0; $k <= $limit; $k ++) {
#                 $cube[$i][$j][$k][$m] = $UNDEF;
#             } # for $k
#         } # for $j
#     } # for $i
# } # for $m

$limit -= 2; # -1 .. m+1
my $n = 0;
my $sum;
for ($m = 0; $m <= $maxn; $m ++) {
    $sum = 0;
    for ($i = 0; $i <= $m; $i ++) {
        for ($j = 0; $j <= $m; $j ++) {
            for ($k = 0; $k <= $m; $k ++) {
                $sum += &aux(join(",", ($i, $j, $k, $m)));
            } # for $k
        } # for $j
    } # for $i
    print "$n $sum\n";
    $n ++;
} # for $m
my $elapsed = time - $start;
print "elapsed: $elapsed, #hash=" . scalar(%hash) . "\n";
#--------
sub aux {
    # my $key = sprintf("%02x%02x%02x%02x", $i,$j,$k,$m);
    my ($key) = @_;
    my $result;
#     if ($m <= $limit) {
#         $result = $cube[$i + 1][$j + 1][$k + 1][$m + 1];
#         if ($result != $UNDEF) {
#             return $result;
#         } else {
#         }
#     } elsif (defined(  $hash{$key})) {
    if (defined(  $hash{$key})) {
        return $hash{$key};
    } 

    {
	    my ($i, $j, $k, $m) = split(/\,/, $key);
        if (0) {
    } elsif ( ($key =~ m{\-}o) or
                  $i > $m or $j > $m or $k > $m
            #   or   
            #     $i < 0  or $j < 0  or $k < 0
                ) {
            $result = 0;
            # print "cond $i,$j,$k,$m\n";
        } elsif ($m == 0) {
            if (substr($key, 0, 5) eq "0,0,0") {
                $result = 1; # the Kronecker delta
            } else {
                $result = 0;
            }
        } else {
            my $mn1 = $m - 1;         
            my $ip1 = $i + 1;         
            $result
            = &aux(join(",", ($i - 1, $j    , $k    , $mn1)))
            + &aux(join(",", ($ip1  , $j - 1, $k    , $mn1)))
            + &aux(join(",", ($ip1  , $j + 1, $k - 1, $mn1)))
            + &aux(join(",", ($ip1  , $j + 1, $k + 1, $mn1)))
            ;
        }
#         if ($m <= $limit) {
#             $cube[$i + 1][$j + 1][$k + 1][$m + 1] = $result;
#         } else 
        {
            $hash{$key} = $result;
        }
    }
    # print "aux($i, $j, $k, $m) = $result\n";
    # $sum += $result;
    return $result;
} # aux
__DATA__
# A147999 Number of walks within N^3 (the first octant of Z^3) starting at (0,0,0)
# and consisting of n steps taken from {(-1, -1, -1), (-1, -1, 1), (-1, 1, 0), (1, 0, 0)}
# MMA:
aux[i_Integer, j_Integer, k_Integer, n_Integer] := Which
[Min[i, j, k, n] < 0 || Max[i, j, k] > n, 0
, n == 0, KroneckerDelta[i, j, k, n]
, True, aux[     i,      j,      k,      n]
      = aux[-1 + i,      j,      k, -1 + n]
      + aux[ 1 + i, -1 + j,      k, -1 + n]
      + aux[ 1 + i,  1 + j, -1 + k, -1 + n]
      + aux[ 1 + i,  1 + j,  1 + k, -1 + n]
]; Table[Sum[aux[i, j, k, n], {i, 0, n}, {j, 0, n}, {k, 0, n}], {n, 0, 10}]

# A151258 Number of walks within N^2 (the first quadrant of Z^2) starting at (0,0)
# and consisting of n steps taken from {(-1, -1), (-1, 1), (0, 1), (1, -1)}
# MMA:
(* KroneckerDelta[n1, n2, ...] gives the Kronecker delta,
   equal to 1 if all the ni are equal, and 0 otherwise.
*)
aux[i_Integer, j_Integer, n_Integer] := Which
[ Min[i, j, n] < 0 || Max[i, j] > n, 0
, n == 0, KroneckerDelta[i, j, n]
, True, aux[     i,      j,      n]
      = aux[-1 + i,  1 + j, -1 + n]
      + aux[     i, -1 + j, -1 + n]
      + aux[ 1 + i, -1 + j, -1 + n]
      + aux[ 1 + i,  1 + j, -1 + n]
];
Table[Sum[aux[i, j, n], {i, 0, n}, {j, 0, n}], {n, 0, 25}]

------------------
C:\Users\User\work\gits\fasces\oeis\walk>perl a147999.pl
0 1 # 1
1 1 # 40
2 2 # 140
3 3 # 337
4 8 # 673
5 15 # 1196
6 39 # 1960
7 77 # 3025
8 244 # 4457
9 543 # 6328
10 1655 # 8716
11 3729 # 11705
12 12385 # 15385
13 29510 # 19852
14 93170 # 25208
15 221283 # 31561
16 764948 # 39025
17 1908675 # 47720
18 6323115 # 57772
19 15688889 # 69313
20 55069789 # 82481
21 141067986 # 97420
22 473165330 # 114280
23 1200395415 # 133217
24 4290381497 # 154393
25 11232104990 # 177976
26 38585190644 # 204140
27 100082744787 # 233065
28 360316046969 # 264937
29 956558534943 # 299948
30 3305432502421 # 338296
31 8679121868177 # 380185
32 31575545872868 # 425825
33 84905308145331 # 475432
34 297706551684275 # 529228
35 792355167136233 # 587441
36 2894579996880973 # 650305
37 7851140332130390 # 718060
38 27617758176149270 # 790952
39 74074398604754239 # 869233
40 272486108584190717 # 953161
41 745370623080004250 # 1043000
42 2648302837858250272 # 1139020
43 7168797275554974443 # 1241497
44 26439316801656199313 # 1350713
45 72751323211560272235 # 1466956
46 258980893628645953877 # 1590520
47 704761821019050242637 # 1721705
48 2612208295351213023505 # 1860817
49 7231487871211593417806 # 2008168
50 25932849416321120942360 # 2164076
51 71045376186314603581659 # 2328865
52 263791243542796819000805 # 2502865
53 733392523833688548357435 # 2686412
54 2633135306901581520189615 # 2879848
55 7241440534006782753951173 # 3083521
56 26989207291945238903127433 # 3297785
57 75377989142133255605855550 # 3523000
58 272179489186402623987392960 # 3759532
59 752368483027911497151426039 # 4007753
60 2807570431140091276829867585 # 4268041
61 7866655397591840323074838544 # 4540780
62 28426531922063027429732932268 # 4826360
63 78805903950264595875649474431 # 5125177
64 294954544130095458543363909572 # 5437633
65 829394113234637501658949037835 # 5764136
66 3010797080868296616593874361579 # 6105100
67 8380621602406703205136976317721 # 6460945
68 31395105879450925418627898077021 # 6832097
69 88504854116017090042946711820726 # 7218988
70 321431524379721316267414137241070 # 7622056
71 896737775188287546653339146676127 # 8041745
72 3367494952510758817317798494136749 # 8478505
73 9520431161237333856627743328552554 # 8932792
74 34707107060570491611419080477933728 # 9405068
75 97146500995307456956601298593481563 # 9895801
76 365055475763397557360790397361296433 # 10405465
77 1034167840516324311359653385826985615 # 10934540
78 3771137112384458703283439800475817705 # 11483512
79 10574643998930840379275732247228837989 # 12052873
80 39817866184167714263437380355705912037 # 12643121
81 113066791800173358769943244263507110410 # 13254760
82 413619230254373327655388173232841807852 # 13888300
83 1163013225042850866212906776426264982019 # 14544257
84 4381440297607657541135328543391924738933 # 15223153
85 12462271923461646907063886923407079996271 # 15925516
86 45595959682033663681384440608116902773627 # 16651880
87 128395395692066267824457610350408633909085 # 17402785
88 484540591407834019227945540328093817052785 # 18178777
89 1380926204700094260299092867163693723473974 # 18980408
90 5066273304758588554184499687976482662474632 # 19808236
91 14299449944952298734252710898405129910405895 # 20662825
92 53984469800544915833455332083358903445423937 # 21544745
93 154067833058918551723336615027464843253936588 # 22454572
94 565267542536747615048428024901553460505957708 # 23392888
95 1597400251082303841403881257871272643389846315 # 24360281
96 6039618024347518181396342574347112699275087377 # 25357345
97 17265748745139361735734427860173492487999966830 # 26384680
98 63498517939579191507391596251225503893706723736 # 27442892
99 179799628835185434761681090206720663546914374427 # 28532593
100 680009517485310773055207610718222490056431540229 # 29654401

