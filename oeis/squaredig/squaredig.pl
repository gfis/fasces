#!perl

# Evaluate - for a selection of decimal digits - which
#   numbers and their squares use only those digits.
# @(#) $Id$
# 2018-10-17, Georg Fischer
# For Jonathan Wellon's sequences A136808-A137147
#
# Usage:
#   perl squaredig.pl [-d debug] [-n max_ind] [-s digits] [-w max_width]
#------------------------------
use strict;
use Math::BigInt;
use Math::BigInt':constant';

my $debug     = 0;
my $max_ind   = 1000;
my $subset    = "0146";
my $max_width = 16;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A\-})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{\-d}) {
        $debug     = shift(@ARGV);
    } elsif ($opt  =~ m{\-n}) {
        $max_ind   = shift(@ARGV);
    } elsif ($opt  =~ m{\-s}) {
        $subset    = shift(@ARGV);
    } elsif ($opt  =~ m{\-w}) {
        $max_width = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while ARGV
#----------------------------------------------
my @digs  = split(//, $subset);
my @seqs  = ("");
my $minbl = 0; # start of block
my $maybl = scalar(@seqs); # asserted, 1 behind end of block
my $width = 1; # number of digits in $num
my $pow10 = 1; # 1 with $width-1 zeroes
my $index = 1;
while ($width <= $max_width) {
    foreach my $dig (@digs) {
        my $ibl = $minbl;
        while ($ibl < $maybl && $index <= $max_ind) {
            my $num   = Math::BigInt->new("$dig$seqs[$ibl]"); # contains proper digits by construction
            my $npow2 = Math::BigInt->new($num);
            $npow2->bmul($num);
            if ($debug >= 2) {
                print "test: $num width=$width scalar=" . scalar(@seqs) . "\n";
            }
            if ($npow2 =~ m{\A[$subset]+\Z}o) { # square has proper digits, too
                push(@seqs, $num);
                if ($debug >= 1) {
                    print "pushed: $num width=$width scalar=" . scalar(@seqs) . "\n";
                }
                if ($dig != 0) { # no leading zero
                    print "$index $num\n";
                    $index ++;
                } # no leading zero
                # $npow2 proper
            } elsif (substr($npow2, - $width) =~ m{\A[$subset]+\Z}o) {
                push(@seqs, $num);
            }               
            $ibl ++;
        } # while $ibl
    } # foreach $dig
    $minbl = $maybl;
    $maybl = scalar(@seqs);
    $width ++; # enter next level
    $pow10 *= 10;
} # while $width
__DATA__
..\gits\fasces\oeis\squaredig>perl squaredig.pl -s 13456
1 1
2 4
3 6
4 34
5 56
6 66
7 116
8 334
9 666
10 1146
11 1156
12 3334
13 3656
14 6454
15 6666
16 11556
17 33334
18 36556
19 66454
20 66666
21 116454
22 333334
23 561556
24 643546
25 666666
26 1163466
27 1164631
28 3333334
29 3341354
30 3363646
31 3651454
32 3655334
33 5616454
34 6446434
35 6454116
36 6666666
37 11463556
38 11463566
39 33333334
40 56135146
41 64463566
42 64463646
43 66666666
44 115613646
45 116366454
46 116454116
47 333333334
48 333416354
49 334161116
50 365316454
51 365531344
52 366553334
53 366553466
54 561546556
55 641433131
56 644564631
57 666666666
58 1146545534
59 1155645116
60 1164544166
61 3333333334
62 3413453444
63 3651453566
64 3651651156
65 3653153656
66 6444651616
67 6445551454
68 6453335156
69 6644664334
70 6666666666
71 11465311354
72 33333333334
73 33334164631
74 33334166354
75 34141413466
76 34151331666
77 36516635156
78 36531511556
79 36546636556
80 36555664631
81 36654653656
82 36655346331
83 36665533334
84 36666546556
85 56166311534
86 64446444166
87 64446531454
88 64464444166
89 64541114116
90 64541114466
91 64545436434
92 64545446434
93 66433135156
94 66433151616
95 66645451116
96 66666666666
97 114654443631
98 116366454116
99 116411531454
100 333333333334
101 333641351534
102 334143151156
103 365314444166
104 365315156344
105 365315554631
106 365465636354
107 365535654166
108 644551444546
109 644564311116
110 644644441156
111 666666666666
112 1145134645146
113 1146151453566
114 1146435635156
115 1155145636556
116 1163333363466
117 1163664536434
118 1164661545534
119 3333333333334
120 3333341666354
121 3334151333616
122 3336414461146
123 3413435434666
124 3651511531454
125 3654511656344
126 3654663536444
127 3665151315354
128 3665453111616
129 3665454151146
130 3665533564631
131 3666655333334
132 5615463615354
133 5616356613646
134 6413614546146
135 6414556613166
136 6414566636534
137 6435166154546
138 6443341643616
139 6445413434646
140 6453345144546
141 6454116155334
142 6566151333646
143 6566156535116
144 6641646363166
145 6641653644546
146 6643315111156
147 6643444546556
148 6664316554116
149 6664331636116
150 6664541553334
151 6666435654166
152 6666666666666
153 11465344145146
154 11546144536444
155 11551464544131
156 11556151453466
157 11556453411556
158 11556615613646
159 11633333363466
160 11634631114116
161 33333333333334
162 33363365561116
163 33363655545146
164 33635343635146
165 34141343143546
166 36515111344666
167 36515115136534
168 36531514431331
169 36655635534166
170 36665165431666
171 36665563563556
172 56156135313566
173 56156163113646
174 56156436536354
175 56163453545534
176 56166133346666
177 64135451635156
178 64136114346331
179 64316534135116
180 64316651354166
181 64354614561556
182 64454133416354
183 64454133641331
184 64463513363331
185 64464343364116
186 64533453443656
187 64541113511556
188 65661643553566
189 65661644156344
190 66416463656344
191 66433136651156
192 66433151636556
193 66433534561556
194 66446455611616
195 66454144441454
196 66645641651616
197 66664335544166
198 66664414544166
199 66664431645116
200 66666666666666
201 114514436344666
202 114615145441454
203 114654551346444
204 115513441454466
205 116333333363466
206 116333336436146
207 116466366666354
208 116466541613646
209 333333333333334
210 333333416666354
211 333334151436146
212 333411654436616
213 333641343561534
214 334131131643616
215 336353164565334
216 336365346511116
217 336665355444166
218 341343443551454
219 341513464363466
220 341561314453444
221 341563411611146
222 365145664555454
223 365435564151146
224 365556635344666
225 365561411343656
226 365563341114116
227 366515533564631
228 366556453546331
229 366666545536354
230 366666553333334
231 561543545163166
232 561561333561556
233 561563136536146
234 561661334361434
235 641354314444166
236 641413631454116
237 641444554436434
238 641446366553466
239 641456416636116
240 641456556155334
241 641516535536354
242 641516536531331
243 643145641636116
244 643556613333616
245 644331541455454
246 644541436461354
247 644555145535534
248 644564454144546
249 644564555613444
250 645454363641331
251 645456531561434
252 664344461355354
253 664345133546146
254 664541431613646
255 664555163666354
256 666645431351146
257 666666666666666
258 1145135631335666
259 1146144164333334

